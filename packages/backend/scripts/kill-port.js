const { exec } = require('child_process');
const util = require('util');
const execPromise = util.promisify(exec);

const PORT = process.env.PORT || 3001;

async function killPort(port) {
  try {
    console.log(`üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ä—Ç—É ${port}...`);
    
    // –î–ª—è Windows
    if (process.platform === 'win32') {
      try {
        const { stdout } = await execPromise(`netstat -ano | findstr :${port}`);
        
        if (stdout) {
          const lines = stdout.split('\n').filter(line => line.includes('LISTENING'));
          
          for (const line of lines) {
            const parts = line.trim().split(/\s+/);
            const pid = parts[parts.length - 1];
            
            if (pid && pid !== '0') {
              console.log(`üî™ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É –Ω–∞ –ø–æ—Ä—Ç—É ${port} (PID: ${pid})...`);
              await execPromise(`taskkill /PID ${pid} /F`);
              console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å ${pid} —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
            }
          }
        } else {
          console.log(`‚úÖ –ü–æ—Ä—Ç ${port} –≤—ñ–ª—å–Ω–∏–π`);
        }
      } catch (error) {
        // –ü–æ—Ä—Ç –≤—ñ–ª—å–Ω–∏–π –∞–±–æ –ø–æ–º–∏–ª–∫–∞
        console.log(`‚úÖ –ü–æ—Ä—Ç ${port} –≤—ñ–ª—å–Ω–∏–π`);
      }
    } 
    // –î–ª—è Linux/Mac
    else {
      try {
        const { stdout } = await execPromise(`lsof -ti:${port}`);
        
        if (stdout) {
          const pids = stdout.trim().split('\n');
          
          for (const pid of pids) {
            if (pid) {
              console.log(`üî™ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É –Ω–∞ –ø–æ—Ä—Ç—É ${port} (PID: ${pid})...`);
              await execPromise(`kill -9 ${pid}`);
              console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å ${pid} —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
            }
          }
        } else {
          console.log(`‚úÖ –ü–æ—Ä—Ç ${port} –≤—ñ–ª—å–Ω–∏–π`);
        }
      } catch (error) {
        // –ü–æ—Ä—Ç –≤—ñ–ª—å–Ω–∏–π
        console.log(`‚úÖ –ü–æ—Ä—Ç ${port} –≤—ñ–ª—å–Ω–∏–π`);
      }
    }
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –ø–æ—Ä—Ç—É ${port}:`, error.message);
  }
}

// –ó–∞–ø—É—Å–∫
killPort(PORT).then(() => {
  console.log(`üöÄ –ü–æ—Ä—Ç ${PORT} –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!\n`);
}).catch(err => {
  console.error('–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', err);
  process.exit(1);
});
